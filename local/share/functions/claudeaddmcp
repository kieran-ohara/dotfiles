claudeaddmcp() {
  emulate -L zsh

  local server_name=""
  local cli_api_key=""

  # Parse arguments
  while [[ $# -gt 0 ]]; do
    case $1 in
      --api-key)
        cli_api_key="$2"
        shift 2
        ;;
      -*)
        echo "Unknown option: $1"
        return 1
        ;;
      *)
        if [[ -z "$server_name" ]]; then
          server_name="$1"
          shift
        else
          echo "Too many arguments"
          return 1
        fi
        ;;
    esac
  done

  typeset -A mcp_configs
  mcp_configs=(
    atlassian "https://mcp.atlassian.com/v1/sse"
    playwright "mcp-server-playwright"
    context7 "https://mcp.context7.com/mcp"
    aws-knowledge "https://knowledge-mcp.global.api.aws"
    github "https://api.githubcopilot.com/mcp/"
    aws-diagram "uvx awslabs.aws-diagram-mcp-server"
  )
  typeset -A mcp_transports
  mcp_transports=(
    atlassian "sse"
    playwright "stdio"
    context7 "http"
    aws-knowledge "http"
    github "http"
    aws-diagram "stdio"
  )
  typeset -A mcp_scopes
  mcp_scopes=(
    atlassian "user"
    playwright "user"
    context7 "user"
    aws-knowledge "user"
    github "local"
    aws-diagram "user"
  )
  typeset -A mcp_descriptions
  mcp_descriptions=(
    atlassian "Jira MCP server"
    playwright "Playwright browser automation server"
    context7 "Context7 server (requires API key)"
    aws-knowledge "AWS Knowledge MCP server"
    github "GitHub MCP server (requires PAT)"
    aws-diagram "AWS Diagram MCP server"
  )
  typeset -A mcp_auth_headers
  mcp_auth_headers=(
    context7 "CONTEXT7_API_KEY"
    github "GITHUB_MCP_PAT"
  )
  typeset -A mcp_bearer_format
  mcp_bearer_format=(
    github true
  )

  if [[ -z "$server_name" ]]; then
    echo "Usage: claudeaddmcp [--api-key <key>] <server_name>"
    echo "Available servers:"
    for key in ${(k)mcp_descriptions}; do
      printf "  %-12s - %s (scope: %s)\n" "$key" "${mcp_descriptions[$key]}" "${mcp_scopes[$key]:-local}"
    done
    return 1
  fi

  if [[ -z "${mcp_transports[$server_name]}" ]]; then
    echo "Error: Unknown MCP server '$server_name'"
    echo "Run 'claudeaddmcp' without arguments to see available servers"
    return 1
  fi

  local transport="${mcp_transports[$server_name]}"
  local config="${mcp_configs[$server_name]}"
  local scope="${mcp_scopes[$server_name]:-local}"
  local auth_header="${mcp_auth_headers[$server_name]}"

  local api_key=""
  if [[ -n "$auth_header" ]]; then
    # Prioritize CLI argument, then check environment variable
    if [[ -n "$cli_api_key" ]]; then
      api_key="$cli_api_key"
      echo "Using API key from --api-key argument"
    else
      # Check for environment variable MCP_{header_name}
      local env_var_name="MCP_${auth_header}"
      api_key="${(P)env_var_name}"

      if [[ -z "$api_key" ]]; then
        echo "Error: No API key provided"
        echo "Either set environment variable $env_var_name or use --api-key <key>"
        echo "Example: claudeaddmcp --api-key 'your-api-key' $server_name"
        return 1
      fi

      echo "Using API key from environment variable $env_var_name"
    fi
  fi

  echo "Adding MCP server: $server_name"
  echo "Scope: $scope"
  echo "Transport: $transport"
  echo "Config: $config"

  if [[ "$transport" == "stdio" ]]; then
    claude mcp add --scope "$scope" "$server_name" -- "$config"
  elif [[ -n "$auth_header" ]]; then
    if [[ -n "${mcp_bearer_format[$server_name]}" ]]; then
      # Use Authorization Bearer format for servers that require it
      claude mcp add --scope "$scope" --transport "$transport" "$server_name" "$config" -H "Authorization: Bearer ${api_key}"
    else
      # Use custom header format for other servers
      claude mcp add --scope "$scope" --transport "$transport" "$server_name" "$config" --header "${auth_header}:${api_key}"
    fi
  else
    claude mcp add --scope "$scope" --transport "$transport" "$server_name" "$config"
  fi

  if [[ $? -eq 0 ]]; then
    echo "Successfully added $server_name MCP server"
  else
    echo "Failed to add $server_name MCP server"
    return 1
  fi
}

