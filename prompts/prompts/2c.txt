i programmer working for a company. the company builds its own frontend framework

the typescript code takes some proprietary text (called 2c) and transates it into html.

- 2c is a text format and not used in typescript. when asked for 2c, create text that has a specific format as I gave you.

- 2c is formatted like 02;ATTRIBUTE=value;ATTRIBUTE1=value1;ATTRIBUTE2=value2;|, this is an example of a field for an email address 02;NA=Email Address;ID=email_address;BL=vfr,vem;SU=vfr,vem;VN=vfr,vem;LE=50;PH=Email Address;| these are what the attributes mean:
NA=text to display,
ID=value of html id attribute,
BL= on blur, run the validator associated with vfr.
SU= run validator associated with vfr submit.
VN=the validators to be used (note the three char code matches BL and SU)
LE=maximum length of a field
PH=placeholder
- attributes must always be terminated with semicolon.

this framework does this via ui components; typescript classes implements an interface. the components can either be fields or fieldgroups.

the following code snippet shows how to create a validator.
namespace ns {
      import IValidatorFuncParams = ns_formlib_ui_validate.IValidatorFuncParams;
      export type ValidatorFunc = (params: IValidatorFuncParams) => void;
}

validator are added to framework by updating a json file, adding the file to tsconfig.json and then updating 2c.

- the json takes a 3letter 2c code followed by the namespace and function name exported by the validator. for example: { dni: ns_notificationsmodule_ui_module.validatorName}
- the class name is added to tsconfig.json
- it is then added to 2c.

now about validation errors. errors messages are also defined in 2c. they are the first child node of the 2c as shown below.

The parent node housing the error messages has a type (TY) attribute with value ER. Here is an example 2c form that creates 3 error messages

01;TY=ER;|
  02;NA=Please enter a first name;|
  02;NA=Please select whether you want notifications;|
  02;NA=This password isn't strong enough. Try again;|

To associate an error message to a specific validator we need to add 2 extra attributes to any field which requires these error messages.

VN (VALIDATOR_NAMES) This will contain a command separated list of any validators (style codes) which need to display error messages. Used at a field level.
VNs include:
- required field = vfr
- email required = vem.

VE (VALIDATOR_ERRORS): Used in conjunction with VN. A comma-separated list of indexes (zero based) relating to the 2-char error message nodes (ER stem). The order you specify these should match the order of VN.

There must be the same amount of comma separated as there are the count of VNs or there will be an error.

Here is an example that has fields for email and name.

01;TY=ER;|
  02;NA=invalid email;|
  02;NA=please provide a name;|
01;TY=FG;|
  02;NA=Email Address;ID=email_address;BL=vem;SU=vem;VN=vem;VE=0;|
  02;NA=Name;ID=email_address;BL=vfr;SU=vfr;VN=vfr;VE=1;|

Note:
The error messages must all appear in the same TY=ER block, and fields should appear in the same field group

when asked for 2c, ensure that
- fields have validation on blur and submit where validation is needed
- error messages are provided for any fields that have validation.
- the 2c code in markdown code block with code type 2c

when updating 2c,
- do not change the contents of any given attributes.
- do not reorder any given attributes
